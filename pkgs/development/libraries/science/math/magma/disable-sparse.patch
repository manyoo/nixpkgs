--- a/CMakeLists.txt	2020-03-29 19:48:20.000000000 -0500
+++ b/CMakeLists.txt	2020-09-09 15:24:57.355807419 -0500
@@ -491,68 +491,68 @@
 # compile MAGMA sparse library
 
 # sparse doesn't have Fortran at the moment, so no need for above shenanigans
-include_directories( sparse/include )
-include_directories( sparse/control )
-include_directories( testing )
-cuda_add_library( magma_sparse ${libsparse_all} )
-target_link_libraries( magma_sparse
-    magma
-    ${blas_fix}
-    ${LAPACK_LIBRARIES}
-    ${CUDA_CUDART_LIBRARY}
-    ${CUDA_CUBLAS_LIBRARIES}
-    ${CUDA_cusparse_LIBRARY}
-)
-add_custom_target( sparse-lib DEPENDS magma_sparse )
-
-
-# ----------------------------------------
-# compile each tester
-
-# save testers to testing/
-# save tester lib files to testing_lib/ to avoid cluttering lib/
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
-set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
-set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
-
-# skip Fortran testers, which require an extra file from CUDA
-foreach( f ${testing_all} )
-    if (${f} MATCHES "\\.(c|cu|cpp)$")
-        list( APPEND testing_all_cpp ${f} )
-    endif()
-endforeach()
-foreach( TEST ${testing_all_cpp} )
-    string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
-    string( REGEX REPLACE "testing/" "" EXE ${EXE} )
-    #message( "${TEST} --> ${EXE}" )
-    add_executable( ${EXE} ${TEST} )
-    target_link_libraries( ${EXE} tester lapacktest magma )
-    list( APPEND testing ${EXE} )
-endforeach()
-add_custom_target( testing DEPENDS ${testing} )
-
-
-# ----------------------------------------
-# compile each sparse tester
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
-foreach( TEST ${sparse_testing_all} )
-    string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
-    string( REGEX REPLACE "sparse/testing/" "" EXE ${EXE} )
-    #message( "${TEST} --> ${EXE}" )
-    add_executable( ${EXE} ${TEST} )
-    target_link_libraries( ${EXE} magma_sparse magma )
-    list( APPEND sparse-testing ${EXE} )
-endforeach()
-add_custom_target( sparse-testing DEPENDS ${sparse-testing} )
+# include_directories( sparse/include )
+# include_directories( sparse/control )
+# include_directories( testing )
+# cuda_add_library( magma_sparse ${libsparse_all} )
+# target_link_libraries( magma_sparse
+#     magma
+#     ${blas_fix}
+#     ${LAPACK_LIBRARIES}
+#     ${CUDA_CUDART_LIBRARY}
+#     ${CUDA_CUBLAS_LIBRARIES}
+#     ${CUDA_cusparse_LIBRARY}
+# )
+# add_custom_target( sparse-lib DEPENDS magma_sparse )
+
+
+# # ----------------------------------------
+# # compile each tester
+
+# # save testers to testing/
+# # save tester lib files to testing_lib/ to avoid cluttering lib/
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
+# set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
+# set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
+
+# # skip Fortran testers, which require an extra file from CUDA
+# foreach( f ${testing_all} )
+#     if (${f} MATCHES "\\.(c|cu|cpp)$")
+#         list( APPEND testing_all_cpp ${f} )
+#     endif()
+# endforeach()
+# foreach( TEST ${testing_all_cpp} )
+#     string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
+#     string( REGEX REPLACE "testing/" "" EXE ${EXE} )
+#     #message( "${TEST} --> ${EXE}" )
+#     add_executable( ${EXE} ${TEST} )
+#     target_link_libraries( ${EXE} tester lapacktest magma )
+#     list( APPEND testing ${EXE} )
+# endforeach()
+# add_custom_target( testing DEPENDS ${testing} )
+
+
+# # ----------------------------------------
+# # compile each sparse tester
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
+# foreach( TEST ${sparse_testing_all} )
+#     string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
+#     string( REGEX REPLACE "sparse/testing/" "" EXE ${EXE} )
+#     #message( "${TEST} --> ${EXE}" )
+#     add_executable( ${EXE} ${TEST} )
+#     target_link_libraries( ${EXE} magma_sparse magma )
+#     list( APPEND sparse-testing ${EXE} )
+# endforeach()
+# add_custom_target( sparse-testing DEPENDS ${sparse-testing} )
 
 
 # ----------------------------------------
 # what to install
-install( TARGETS magma magma_sparse ${blas_fix}
+install( TARGETS magma ${blas_fix}
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib )
-file( GLOB headers include/*.h sparse/include/*.h )
+file( GLOB headers include/*.h )
 if (USE_FORTRAN)
     install( FILES ${headers} ${modules}
              DESTINATION include )
--- a/lib/pkgconfig/magma.pc.in	2020-03-29 19:48:24.000000000 -0500
+++ b/lib/pkgconfig/magma.pc.in	2020-09-09 15:23:21.547736675 -0500
@@ -7,7 +7,7 @@
 Description: Matrix Algebra on GPU and Multicore Architectures
 Version: 2.5.3
 Cflags: -I${includedir} @CFLAGS@
-Libs: -L${libdir} -lmagma_sparse -lmagma @LIBS@
+Libs: -L${libdir} -lmagma @LIBS@
 Libs.private:
 Requires: @MAGMA_REQUIRED@
 Requires.private:
